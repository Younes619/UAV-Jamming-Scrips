from packaging.version import Version as StrictVersion
from PyQt5 import Qt
from gnuradio import qtgui
from gnuradio import analog
from gnuradio import blocks
from gnuradio import gr
from gnuradio.filter import firdes
from gnuradio.fft import window
import sys
import signal
from PyQt5 import Qt
from argparse import ArgumentParser
from gnuradio.eng_arg import eng_float, intx
from gnuradio import eng_notation
from gnuradio import iio
import sip

class sweepjammer(gr.top_block, Qt.QWidget):

    def __init__(self, uri='ip:pluto.local'):
        gr.top_block.__init__(self, "Sweep jammer", catch_exceptions=True)
        Qt.QWidget.__init__(self)
        self.setWindowTitle("Sweep jammer")
        qtgui.util.check_set_qss()
        try:
            self.setWindowIcon(Qt.QIcon.fromTheme('gnuradio-grc'))
        except BaseException as exc:
            print(f"Qt GUI: Could not set Icon: {str(exc)}", file=sys.stderr)
        self.top_scroll_layout = Qt.QVBoxLayout()
        self.setLayout(self.top_scroll_layout)
        self.top_scroll = Qt.QScrollArea()
        self.top_scroll.setFrameStyle(Qt.QFrame.NoFrame)
        self.top_scroll_layout.addWidget(self.top_scroll)
        self.top_scroll.setWidgetResizable(True)
        self.top_widget = Qt.QWidget()
        self.top_scroll.setWidget(self.top_widget)
        self.top_layout = Qt.QVBoxLayout(self.top_widget)
        self.top_grid_layout = Qt.QGridLayout()
        self.top_layout.addLayout(self.top_grid_layout)
        self.settings = Qt.QSettings("GNU Radio", "sweepjammer")

        try:
            if StrictVersion(Qt.qVersion()) < StrictVersion("5.0.0"):
                self.restoreGeometry(self.settings.value("geometry")
                .toByteArray())
            else:
                self.restoreGeometry(self.settings.value("geometry"))
        except BaseException as exc:
            print(f"Qt GUI: Could not restore geometry: {str(exc)}",
            file=sys.stderr)
        ##################################################
        # Parameters
        ##################################################
        self.uri = uri
        ##################################################
        # Variables
        ##################################################
        self.samp_rate = samp_rate = 1000000
        ##################################################
        # Blocks
        ##################################################
        self.qtgui_sink_x_0 = qtgui.sink_c(
            1024,  # fftsize
            window.WIN_BLACKMAN_hARRIS,  # wintype
            0,  # fc
            samp_rate,  # bw
            "",  # name
            True,  # plotfreq
            True,  # plotwaterfall
            True,  # plottime
            True,  # plotconst
            None  # parent
        )
        self.qtgui_sink_x_0.set_update_time(1.0 / 10)
        self._qtgui_sink_x_0_win = sip.wrapinstance
        (self.qtgui_sink_x_0.qwidget(), Qt.QWidget)

        self.qtgui_sink_x_0.enable_rf_freq(False)
        self.top_layout.addWidget(self._qtgui_sink_x_0_win)
        self.iio_pluto_source_0 = iio.fmcomms2_source_fc32
        (uri if uri else iio.get_pluto_uri(), [True, True], 32768)
        self.iio_pluto_source_0.set_len_tag_key('packet_len')
        self.iio_pluto_source_0.set_frequency(2420000000)
        self.iio_pluto_source_0.set_samplerate(samp_rate)
        self.iio_pluto_source_0.set_gain_mode(0, 'slow_attack')
        self.iio_pluto_source_0.set_gain(0, 64)
        self.iio_pluto_source_0.set_quadrature(True)
        self.iio_pluto_source_0.set_rfdc(True)
        self.iio_pluto_source_0.set_bbdc(True)
        self.iio_pluto_source_0.set_filter_params('Auto', '', 0, 0)
        self.iio_pluto_sink_0 = iio.fmcomms2_sink_fc32(uri if uri
        else iio.get_pluto_uri(), [True, True], 32768, False)
        self.iio_pluto_sink_0.set_len_tag_key('')
        self.iio_pluto_sink_0.set_bandwidth(20000000)
        self.iio_pluto_sink_0.set_frequency(2420000000)
        self.iio_pluto_sink_0.set_samplerate(samp_rate)
        self.iio_pluto_sink_0.set_attenuation(0, 10.0)
        self.iio_pluto_sink_0.set_filter_params('Auto', '', 0, 0)
        self.blocks_vco_c_0 = blocks.vco_c(samp_rate, (6.282 * 102400), 1)
        self.analog_sig_source_x_0 = analog.sig_source_f(samp_rate, 
        analog.GR_SAW_WAVE, 100, 2, (-1), 0)
        ##################################################
        # Connections
        ##################################################
        self.connect((self.analog_sig_source_x_0, 0), 
        (self.blocks_vco_c_0, 0))
        self.connect((self.blocks_vco_c_0, 0), (self.iio_pluto_sink_0, 0))
        self.connect((self.blocks_vco_c_0, 0), (self.qtgui_sink_x_0, 0))
        ##################################################
        # Frequency Sweep
        ##################################################
        self.start_freq = 2410000000
        self.stop_freq = 2475000000
        self.step_freq = 2000000
        self.bandwidth = 20000000
        self.current_freq = self.start_freq
        self.update_frequency()
        self.timer = Qt.QTimer()
        self.timer.timeout.connect(self.update_frequency)
        self.timer.start(1000)  # Change frequency every 1000 ms (1 second)

    def update_frequency(self):
        if self.current_freq > self.stop_freq:
            self.current_freq = self.start_freq
        lower_freq = self.current_freq - self.bandwidth / 2
        upper_freq = self.current_freq + self.bandwidth / 2
        self.iio_pluto_sink_0.set_frequency(self.current_freq)
        print(f"Processing frequency: {self.current_freq} Hz")
        print(f"Processing frequency range: {lower_freq} Hz - 
        {upper_freq} Hz")
        self.current_freq += self.step_freq

    def closeEvent(self, event):
        self.settings = Qt.QSettings("GNU Radio", "sweepjammer")
        self.settings.setValue("geometry", self.saveGeometry())
        self.stop()
        self.wait()
        event.accept()

    def get_uri(self):
        return self.uri

    def set_uri(self, uri):
        self.uri = uri

    def get_samp_rate(self):
        return self.samp_rate

    def set_samp_rate(self, samp_rate):
        self.samp_rate = samp_rate
        self.analog_sig_source_x_0.set_sampling_freq(self.samp_rate)
        self.iio_pluto_sink_0.set_samplerate(self.samp_rate)
        self.iio_pluto_source_0.set_samplerate(self.samp_rate)
        self.qtgui_sink_x_0.set_frequency_range(0, self.samp_rate)

def argument_parser():
    parser = ArgumentParser()
    parser.add_argument(
        "--uri", dest="uri", type=str, default='ip:pluto.local',
        help="Set URI [default=%(default)r]")
    return parser

def main(top_block_cls=sweepjammer, options=None):
    if options is None:
        options = argument_parser().parse_args()

    if StrictVersion("4.5.0") <= StrictVersion(Qt.qVersion()) < 
    StrictVersion("5.0.0"):
        style = gr.prefs().get_string('qtgui', 'style', 'raster')
        Qt.QApplication.setGraphicsSystem(style)
    qapp = Qt.QApplication(sys.argv)
    tb = top_block_cls(uri=options.uri)
    tb.start()
    tb.show()

    def sig_handler(sig=None, frame=None):
        tb.stop()
        tb.wait()
        Qt.QApplication.quit()

    signal.signal(signal.SIGINT, sig_handler)
    signal.signal(signal.SIGTERM, sig_handler)
    timer = Qt.QTimer()
    timer.start(500)
    timer.timeout.connect(lambda: None)

    qapp.exec_()

if __name__ == '__main__':
    main()
